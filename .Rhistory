#                         tabsetPanel(
#                                 id = 'dataset',
#                                 tabPanel('DisMod', dataTableOutput('table1')),
#                                 tabPanel('CODEm', dataTableOutput('table2'))
#                         )
#                 )
#         )
# ))
###WORKING
# shinyUI(fluidPage(
#         titlePanel('DISCCOVAR'),
#                 # Sidebar with controls to provide a caption, select a dataset,
#                 # and specify the number of observations to view. Note that
#                 # changes made to the caption in the textInput control are
#                 # updated in the output area immediately as you type
#                 sidebarLayout(
#                         sidebarPanel(
#                                 textInput("caption", "Caption:", "Data Summary"),
#
#                                 selectInput("dataset", "Choose a dataset:",
#                                             choices = c("DisMod", "CODEm")),
#
#                                 #numericInput("obs", "Number of observations to view:", 25),
#                                 downloadButton('downloadData', 'Download')
#
#                         ),
#
#
#                         # Show the caption, a summary of the dataset and an HTML
#                         # table with the requested number of observations
#                         mainPanel(
#                                 h3(textOutput("caption", container = span)),
#
#                                 verbatimTextOutput("summary"),
#
#                                 tableOutput("view")
#                         )
#                 )
#         )
# )
####ASIDE
#         navbarPage(
#                 title = h4("DISCCOVAR"),
#
#                 mainPanel(
#                         tabsetPanel(
#                                 id = 'dataset',
#                                 tabPanel('DisMod', dataTableOutput('table1')),
#                                 tabPanel('CODEm', dataTableOutput('table2'))
#                         )
#                 ),
#                 conditionalPanel(
#                         'input.dataset==="DisMod"'
#                 ),
#                 conditionalPanel(
#                         'input.dataset==="CODEm"'
#                 ),
#
#
#                 # Create a new Row in the UI for selectInputs for DisMod
#                 fluidRow(
#                         column(4,
#                                selectInput("modelable_entity_name",
#                                            "modelable_entity_name:",
#                                            c("All",
#                                              unique(as.character(dt$modelable_entity_name))))
#                         ),
#                         column(4,
#                                selectInput("covariate_name",
#                                            "covariate_name:",
#                                            c("All",
#                                              unique(as.character(dt$covariate_name))))
#                         ),
#                         column(4,
#                                selectInput("model_version_run_start",
#                                            "model_version_run_start:",
#                                            c("All",
#                                              unique(as.character(dt$model_version_run_start))))
#                         )
#                 ),
#
#
#                        # Create a new row for the table.
#                         fluidRow(
#                                 DT::dataTableOutput("table1")
#                         ),
#
#               fluidRow(
#                       column(4,
#                              selectInput("cause_name",
#                                          "cause_name:",
#                                          c("All",
#                                            unique(as.character(dt$cause_name))))
#                       ),
#                       column(4,
#                              selectInput("covariate_name",
#                                          "covariate_name:",
#                                          c("All",
#                                            unique(as.character(dt$covariate_name))))
#                       ),
#                       column(4,
#                              selectInput("model_version_run_start",
#                                          "model_version_run_start:",
#                                          c("All",
#                                            unique(as.character(dt$model_version_run_start))))
#                       )
#
#               ),
#
#                       # Create a new row for the table.
#                       fluidRow(
#                               DT::dataTableOutput("table2")
#                       ),
#
#    downloadLink('DisMod', 'Download')
#  )
#)
##WORKING
library(shiny)
library(ggplot2)
library(dplyr)
library(RMySQL)
library(data.table)
#set environment
if (.Platform$OS.type=="unix") {
prefix <- '/home/j'
} else {
prefix <- 'J:'
}
##pull covariates used in CODEm
conn <- dbConnect(RMySQL::MySQL(), host="modeling-cod-db.ihme.washington.edu", username="readonly", password="justlooking")
CODEm <-unique(dbGetQuery(conn, "select c.cause_id, c.cause_name, covariate_id,cov.covariate_name, mod_cov.model_version_id as CODEm_model_version_id,
mod_cov.covariate_model_version_id, covmv.description as covariate_model_version_description, mv.description as CODEm_model_version_description,
mv.date_inserted as model_version_run_start, cov.covariate_name_short
from
cod.model_covariate mod_cov
join
cod.model_version mv using (model_version_id)
join
covariate.model_version covmv on mod_cov.covariate_model_version_id = covmv.model_version_id
join
covariate.data_version covdv on covmv.data_version_id = covdv.data_version_id
join
shared.covariate cov using (covariate_id)
join
shared.cause c using (cause_id)
where
covmv.date_inserted > '2015-01-01 00:00:00'
order by mv.date_inserted desc"))
CODEm <- data.table(unique(select(CODEm, c(cause_id,cause_name,covariate_name_short,covariate_name_short,covariate_name,CODEm_model_version_id,model_version_run_start)))) #%>%
#setnames(c("cause_id","cause_name","CODEm_model_version_id"),c("entity_id","entity_name","sys_model_version_id"))
dbDisconnect(conn)
##Pull covariates used in DisMod
conn <- dbConnect(RMySQL::MySQL(), host="modeling-epi-db.ihme.washington.edu", username="readonly", password="justlooking")
DisMod <- dbGetQuery(conn, "SELECT
model_parameter.model_parameter_id,
model_parameter.model_version_id as dismod_model_version_id,
model_parameter.country_covariate_id,
model_version.model_version_run_start,
model_version.modelable_entity_id,
modelable_entity.modelable_entity_name,
parameter_type.parameter_type_id,
covariate.covariate_name_short,
covariate.covariate_name
FROM epi.model_parameter
JOIN
epi.parameter_type USING (parameter_type_id)
JOIN
epi.model_version USING (model_version_id)
JOIN
epi.modelable_entity USING (modelable_entity_id)
JOIN
shared.covariate ON model_parameter.country_covariate_id = covariate.covariate_id
WHERE parameter_type_id = 7
AND model_version_run_start > '2015-01-01 00:00:00'
ORDER BY model_version_run_start DESC")
DisMod <- data.table(unique(select(DisMod,c(modelable_entity_id,modelable_entity_name,covariate_name_short,covariate_name,dismod_model_version_id,model_version_run_start)))) #%>%
#setnames(c("modelable_entity_id","modelable_entity_name","dismod_model_version_id"),c("entity_id","entity_name","sys_model_version_id"))
dbDisconnect(conn)
#
# # write.csv(CODEm,paste0(prefix,"/temp/Edem/covariates/covariate_checks/results/CODEm_v8.csv"), row.names =F)
# # write.csv(DisMod,paste0(prefix,"/temp/Edem/covariates/covariate_checks/results/DisMod_v8.csv"), row.names =F)
shinyServer(function(input, output) {
# sorted columns are colored now because CSS are attached to them
datasetInput <- reactive({
switch(input$dataset,
"DisMod"=DisMod,
"CODEm"=CODEm)
})
output$mytable1 <- DT::renderDataTable({
DT::datatable(datasetInput(), options = list(lengthMenu = c(10, 30, 45), pageLength = 10))
})
# customize the length drop-down menu; display 5 rows per page by default
output$mytable2 <- DT::renderDataTable({
DT::datatable(datasetInput(), options = list(lengthMenu = c(10, 30, 45), pageLength = 10))
})
#create a doenloader
output$downloadData <- downloadHandler(
filename = function() {
paste0(input$dataset,'.csv')
},
content = function(file) {
write.table(datasetInput(),file,sep=",",row.names=FALSE)
}
)
})
shiny::runApp('covariates_development/disccovar')
#-----------------------------------------------------------------------------------
#Purpose : Build a diagnostics scatter viz for covariates 2013 vs 2015
#Date :
#Edem Dossou
#-----------------------------------------------------------------------------------
library(shiny)
library(shinydashboard)
library(ggplot2)
shinyUI(dashboardPage(
dashboardHeader(
title = "COVSCATTER"),
dashboardSidebar(
sidebarUserPanel("IHMErs",
subtitle = a(href = "#", icon("circle", class = "text-success"), "Online"),
# Image file should be in www/ subdir
image = "diagnostics.png"
),
sidebarMenu(
# Setting id makes input$tabs give the tabName of currently-selected tab
id = "tabs",
selectInput(inputId="covariate","select a covariate",choices=covariates),
selectInput(inputId="year", "select a GBD year", choices=c(1990,1995,2000,2005,2010,2015))
#selectInput(inputId="sex","Gender",choices=c("Male","Female","Both Sex"))
),
tags$head(tags$style(".mybutton{background-color:green;} .skin-black .sidebar .mybutton{color: green;}"))
),
dashboardBody(
mainPanel(
fluidRow(
column(12, align="right",
plotOutput('scatter', width =800, height = 700,  click="plot_click")
)
)
)
)
)
)
#-----------------------------------------------------------------------------------
#Purpose : Build a diagnostics scatter viz for covariates 2013 vs 2015
#Date :
#Edem Dossou
#-----------------------------------------------------------------------------------
#rm(list = ls())
#load packages
library(RMySQL);library(data.table);library(ggplot2); library(dplyr)
#Set environments
if (.Platform$OS.type=="unix") {
prefix <- '/home/j'
} else {
prefix <- 'J:'
}
################################################################
#Helper function : get 2013 estimates
################################################################
#get covariates
get_covariates <- function(incl_description=F) {
conn <- dbConnect(RMySQL::MySQL(), host="modeling-covariates-db.ihme.washington.edu", username="readonly", password="justlooking")
covariates <- dbGetQuery(conn, "
SELECT covariate_id, covariate_name_short, covariate_name, covariate_description, by_age, by_sex
FROM shared.covariate
WHERE inactive!=1")
dbDisconnect(conn)
if (!incl_description){
covariates$covariate_description <- NULL
}
return(covariates)
}
# 2013 estimates
get_estimates_2013 <- function(covariate_name_short,filters=list()) {
# Setup base query
query <- sprintf("
SELECT covariate_id, location_id,
year_id,
sex_id,
age_group_id,
mean_value, covariate as covariate_name_short
FROM covariates.models
JOIN covariates.model_versions using (model_version_id)
JOIN covariates.data_versions using(data_version_id)
join covariates.demographics using (demographic_id)
join covariates.locations using (location_id)
join covariates.covariates using (covariate_id)
WHERE is_best=1
AND year_id IN (1990,1995,2000,2005,2010,2013)
AND locations.type = 'admin0'
AND covariate='%s'", covariate_name_short)
conn <- dbConnect(RMySQL::MySQL(), host="newhalem.ihme.washington.edu", username="readonly", password="justlooking")
estimates <- dbGetQuery(conn, query)
dbDisconnect(conn)
estimates <- unique(estimates)
estimates$year_id[estimates$year_id == 2013] <- 2015
return(estimates)
}
##2015 estimates
get_estimates_2015 <- function(covariate_name_short,filters=list()) {
# Setup base query
base_query <- sprintf("
SELECT DISTINCT
model.model_version_id,
covariate.covariate_id,
covariate.covariate_name_short,
model.location_id,
location.location_name,
model.year_id,
model.age_group_id,
age_group.age_group_name,
model.sex_id,
model.mean_value,
model.lower_value,
model.upper_value,
location_hierarchy_history.ihme_loc_id,
location_hierarchy_history.region_name
FROM covariate.model
JOIN covariate.model_version ON model.model_version_id=model_version.model_version_id
JOIN covariate.data_version ON model_version.data_version_id=data_version.data_version_id
JOIN shared.covariate ON data_version.covariate_id=covariate.covariate_id
JOIN shared.location ON model.location_id=location.location_id
JOIN shared.age_group ON model.age_group_id=age_group.age_group_id
JOIN shared.location_hierarchy_history ON location.location_id = location_hierarchy_history.location_id
WHERE level = 3
AND year_id IN (1990,1995,2000,2005,2010,2015)
AND is_best = 1
AND is_estimate = 1
AND covariate_name_short='%s'", covariate_name_short)
query_params <- c()
# Implement additional filters
for (f in names(filters)){
fvalues <- paste(unlist(filters[f]),collapse=",")
# Fix table ambiguity for known join columns
if (f %in% c("age_group_id","model_version_id","data_version_id","location_id")) {
f <- paste0("model.",f)
}
ext_param <- sprintf("AND %s IN (%s)", f, fvalues)
query_params <- c(query_params, ext_param)
}
# Construct filtered query
query <- c(base_query, query_params)
query <- paste(query, collapse=" ")
# Get and return estimates
conn <- dbConnect(RMySQL::MySQL(), host="modeling-covariates-db.ihme.washington.edu", username="readonly", password="justlooking")
dbSendQuery(conn, "SET NAMES utf8")
estimates <- dbGetQuery(conn, query)
dbDisconnect(conn)
estiamtes <- unique(estimates)
Encoding(estimates$location_name) <- "UTF-8"
return(estimates)
}
covariate_scatter <- function(covariate_name_short,year) {
#set directories where graphs to be saved
# mainDir <- paste0(prefix,"/WORK/01_covariates/04_outputs/diagnostics/scatter_plots/")
#get GBD 2013 estimates
estimates2013 <- get_estimates_2013(covariate_name_short)
estimates2013 <- unique(estimates2013)
estimates2013 <- select(estimates2013,covariate_id,covariate_name_short,location_id,year_id,age_group_id,sex_id,mean_value)
#estimates2013 <- rename(estimates2013, mean2013 = mean_value)
names(estimates2013)[names(estimates2013) == "mean_value"] <- 'mean2013'
#get GBD 2015 estimates
estimates2015 <- get_estimates_2015(covariate_name_short)
estimates2015 <- unique(estimates2015)
estimates2015 <- select(estimates2015,covariate_id,covariate_name_short,location_id,year_id, ihme_loc_id,age_group_id, age_group_name, sex_id,mean_value, location_name, region_name)
names(estimates2015)[names(estimates2015) == "mean_value"] <- 'mean2015'
#merge 2013 amd 2015 estimates
estimates <- merge(estimates2013, estimates2015, by=c("covariate_id","location_id","year_id","sex_id","age_group_id","covariate_name_short"), all.x = TRUE)
estimates <- unique(na.omit(estimates))
#plot formatting
y_mod_lab <- "Active best model"
x_mod_lab <- "GBD 2013 best model"
estimates$mean2013[is.na(estimates$mean2013)] <- 0
estimates$mean2015[is.na(estimates$mean2015)] <- 0
estimates$sex <- ifelse(estimates$sex_id == 1, "Male",ifelse(estimates$sex_id == 2,"Female", "Both Sex"))
estimates$sex <- factor(estimates$sex, levels = c("Male", "Female", "Both Sex"))
estimates$age_group_name <- factor(estimates$age_group_name)
#    if (!any(estimates$sex_id %in% c(1,2))) {
#       estimates$sex <- "Both Sex"
#    }
#set regions for color coding
gnum <- 21
gname <- "Region"
#find the range of mean values for 2013 and 2015
estimates$region_name <- factor(estimates$region_name, levels = c("High-income Asia Pacific","Western Europe","High-income North America","Australasia","Southern Latin America",
"Central Europe","Eastern Europe","Central Asia",
"Central Sub-Saharan Africa","Eastern Sub-Saharan Africa","Southern Sub-Saharan Africa","Western Sub-Saharan Africa",
"North Africa and Middle East",
"South Asia",
"East Asia","Southeast Asia","Oceania",
"Andean Latin America","Central Latin America","Tropical Latin America","Caribbean"))
col_grad <- colorRampPalette(c("#9E0142", "#F46D43", "#FEE08B", "#E6F598", "#66C2A5", "#5E4FA2"), space = "rgb")
#one plot for each year to same pdf
#years <- c(1990,1995,2000,2005,2010,2015)
#ifelse(!dir.exists(file.path(mainDir)), dir.create(file.path(mainDir)), FALSE)
#                 for (sx in unique(estimates$sex)) {
#                         print(paste(year, "_", sx))
estimate_by_year_sex <- unique(filter(estimates, year_id == year))
graph_title <- paste0(covariate_name_short, ": ",year)
rng_2013 <- range(estimates$mean2013)
rng_2015 <- range(estimates$mean2015)
model_plot <- ggplot(data=estimate_by_year_sex, aes(x=mean2013, y=mean2015, color=region_name)) +
geom_point() +
geom_text(aes(label=ihme_loc_id), hjust=.5, vjust=.5,show.legend = F) +
scale_y_continuous() +
scale_colour_manual(values=rev(col_grad(gnum)), name=gname) +
xlab(paste0(x_mod_lab,"")) +
ylab(paste0(y_mod_lab,"")) +
coord_cartesian(ylim=rng_2015, xlim=rng_2013) +
facet_grid(sex~age_group_name) +
geom_abline(data=estimate_by_year_sex, intercept = 0, slope = 1, colour="black") +
ggtitle(graph_title) +
theme_bw()+
theme(axis.title.x = element_text(face="bold", color="black", size=14),
axis.title.y = element_text(face="bold", color="black", size=14),
axis.text.x = element_text(color="black", size=12),
axis.text.y = element_text(color="black", size=12),
plot.title = element_text(face="bold", color = "black", size=16),
legend.position="bottom")
print(model_plot, width=800,height=700)
dev.off()
}
#get the list of covariates
covariates <- as.list(get_covariates()$covariate_name_short)
#Set the GBD years
years <- c(1990,1995,2000,2005,2010,2015)
#create a server function
shinyServer(function(input, output) {
#Choose the covariate of interest to be vetted
datasetInput <- reactive({
switch(input$covariate,
"covariates"= covariates)
})
#         sexInput <- reactive({
#                 switch(input$sex,
#                        "covariates"= sexes)
#
#         })
yearInput <- reactive({
switch(input$year,
"years"=years)
})
#create plot
output$scatter <- renderPlot({
covariate_scatter(input$covariate,input$year)
})
})
#-----------------------------------------------------------------------------------
#Purpose : Build a diagnostics scatter viz for covariates 2013 vs 2015
#Date :
#Edem Dossou
#-----------------------------------------------------------------------------------
library(shiny)
library(shinydashboard)
library(ggplot2)
shinyUI(dashboardPage(
dashboardHeader(
title = "COVSCATTER"),
dashboardSidebar(
sidebarUserPanel("IHMErs",
subtitle = a(href = "#", icon("circle", class = "text-success"), "Online"),
# Image file should be in www/ subdir
image = "diagnostics.png"
),
sidebarMenu(
# Setting id makes input$tabs give the tabName of currently-selected tab
id = "tabs",
selectInput(inputId="covariate","select a covariate",choices=covariates),
selectInput(inputId="year", "select a GBD year", choices=c(1990,1995,2000,2005,2010,2015))
#selectInput(inputId="sex","Gender",choices=c("Male","Female","Both Sex"))
),
tags$head(tags$style(".mybutton{background-color:green;} .skin-black .sidebar .mybutton{color: green;}"))
),
dashboardBody(
mainPanel(
fluidRow(
column(12, align="right",
plotOutput('scatter', width =800, height = 700,  click="plot_click")
)
)
)
)
)
)
setwd("J:/temp/Edem/covariates/covariate_checks/covscatter")
runApp()
dev.cur()
?ggsave
runApp()
runApp()
runApp()
runApp()
setwd("~/COURSERA/data_products")
runApp()
install.packages("rsconnect")
rsconnect::setAccountInfo(name='edemdosko', token='699370D44D25B7FE555A5B3B18F82CE1', secret='fe0Og+ud8Oaezw3KlJW+jIjCy8LnaHf5JHt52w7T')
library(rsconnect)
rsconnect::deployApp('C:/Users/edemd/Documents/COURSERA/data_products')
library(rsconnect)
rsconnect::deployApp('C:/Users/edemd/Documents/COURSERA/data_products')
library(rsconnect)
rsconnect::deployApp('C:/Users/edemd/Documents/COURSERA/data_products')
library(rsconnect)
rsconnect::deployApp('C:/Users/edemd/Documents/COURSERA/data_products')
library(rsconnect)
rsconnect::deployApp('C:/Users/edemd/Documents/COURSERA/data_products')
pacman::p_load(dplyr,funModeling,caret,data.table,rpart,randomForest,rattle, ggplot2, gridExtra,shiny,DT, Cairo)
library(rsconnect)
rsconnect::deployApp('C:/Users/edemd/Documents/COURSERA/data_products')
?apply
