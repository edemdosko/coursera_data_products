mex <- unique(grep("MEX_", est.all$ihme_loc_id, value = TRUE))
chn <- unique(grep("CHN_", est.all$ihme_loc_id, value = TRUE))
gbr <- unique(grep("GBR_", est.all$ihme_loc_id, value = TRUE))
est.all <- filter(est.all, !(ihme_loc_id %in% mex))
est.all <- filter(est.all, !(ihme_loc_id %in% gbr))
est.all <- filter(est.all, !(ihme_loc_id %in% chn))
##append now with new gbr and mex subnationals
est.final <- bind_rows(est.all, sub_est) %>% select(-region_name) %>% arrange(ihme_loc_id, year_id)
#making all dupicates are dropped
est.final <- est.final[!duplicated(est.final[,1:2]),]
View(est.final)
write.csv(est.final,paste0(output_dir,"outdoor_pollution_final.csv"), row.names=F)
write.csv(est.final,paste0(output_dir,"outdoor_pollution_final.csv"), row.names=F)
#-------------------------------------------------------
#Purpose : produce graps for outdoor pollution
#4/1/2016
#Edem Dossou
#-------------------------------------------------------
library(ggplot2)
library(dplyr)
library(RMySQL)
source(paste0("J:/WORK/01_covariates/common/r_functions/db_utilities.r"))
pollution.old <- get_cov_estimates("pollution_outdoor_pm25") %>% select(location_id, year_id, mean_value)
pollution.old <- dplyr::rename(pollution.old, mean2013 = mean_value)
imputed <- read.csv("J:/WORK/01_covariates/02_inputs/outdoor_pollution/estimates/imputed_pm2.5.csv")
#readin data
estimate <- read.csv("J:/WORK/01_covariates/02_inputs/outdoor_pollution/estimates/outdoor_pollution_final.csv")
estimate <- merge(estimate, pollution.old, by = c("location_id","year_id"), all.x = TRUE)
estimate <- merge(estimate, imputed, by = c("location_id","year_id"), all.y = TRUE) %>% arrange(ihme_loc_id, year_id)
#generate data value to plot
estimate$data_value <- estimate$exposure_mean
estimate$data_value[!(estimate$year_id %in% c(1990,1995,2000,2005,2010,2013))] <- NA
pdf(paste0("J:/WORK/01_covariates/02_inputs/outdoor_pollution/visuals/outdoor_polltion.pdf"), width=11, height=8)
for (location in unique(estimate$ihme_loc_id)) {
print(location)
#plot
subdata <- subset(estimate, estimate$ihme_loc_id == location)
p <- ggplot(data = subdata ,aes(x=year_id,y=mean_value))
p <- p + geom_line(aes(y = mean_value, colour = "PM2.5 (new) i/epolate"), size = 1, na.rm = F)
p <- p + geom_line(aes(y = exposure_mean, colour = "PM2.5 (new) locpoly"), size = 1, na.rm = F)
p <- p + geom_line(aes(y = mean2013, colour = "PM2.5 (old)"), size = 1, na.rm = F)
p <- p + geom_point(aes(y = data_value, colour = "GBD years estimates"), size = 2, na.rm = F)
p <- p  + scale_colour_manual(name='', values=c("PM2.5 (new) i/epolate"="turquoise","PM2.5 (new) locpoly"="orange","PM2.5 (old)"="green","GBD years estimates"="blue"))
p <- p  + ggtitle(paste(location," - Outdoor Air Pollution"))
p <- p  + xlab("Year_id") + ylab("Outdoor Air Pollution")
p <- p + theme_bw()
print(p)
}
dev.off()
View(sub_est)
install.packages("ISLR")
library(ISLR); library(ggplot2): library(caret);
data(Wage)
summary(Wage)
inTrain <- createDataPartition(y=Wage$wage, p=0.75, list=F)
inTrain <- createDataPartition(y=Wage$wage, p=0.75, list=F)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
dim(training)
dim(testing)
featurePlot(x=training[c("age","education","jobclass")],
y=trainig$Wage,
plot="pairs")
featurePlot(x=training[c("age","education","jobclass")],
y=training$Wage,
plot="pairs")
inTrain <- createDataPartition(y=Wage$wage, p=0.75, list=F)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
featurePlot(x=training[c("age","education","jobclass")],
y=training$Wage,
plot="pairs")
qplot(age,wage,data=training)
qplot(age,wage,colour=jobclass,data=training)
q<-qplot(age,wage,colour=education,data=training)
q + geom_smooth(method="lm", formula=y~x)
cutWage <-cut2(training$wage, g=3)
table(cutWage)
library(ISLR); library(ggplot2): library(caret);library(Hmisc)
library(ISLR); library(ggplot2); library(caret);library(Hmisc);
cutWage <-cut2(training$wage, g=3)
table(cutWage)
p1 <-qplot(cutWage,age,data=training,fill=cutWage,geom=c("boxplot"))
p1
p1 <-qplot(cutWage,age,data=training,fill=cutWage,geom=c("boxplot"))
p2 <- qplot(cutWage,age,data=training,fill=cutWage,geom=c("boxplot","jitter"))
grid.arrange(p1,p2,ncol=2)
library(ISLR); library(ggplot2); library(caret);library(Hmisc);library(gridExtra);
p1 <-qplot(cutWage,age,data=training,fill=cutWage,geom=c("boxplot"))
p2 <- qplot(cutWage,age,data=training,fill=cutWage,geom=c("boxplot","jitter"))
grid.arrange(p1,p2,ncol=2)
t1 <- table(cutWage,training$jobclass)
t1
prop.table(t1,1)
qplot(wage,colour=education,dtaa=training,geom="density")
qplot(wage,colour=education,data=training,geom="density")
data(spam)
library(ISLR); library(ggplot2); library(caret);library(Hmisc);library(gridExtra);library(kernlab)
data(spam)
head(spam)
preObj <- preProcess(training[,-58], method=c("center","scale"))
trainCapAveS <- predict(preObj,training[-58])$capitalAve
mean(trainCapAveS)
library(ISLR); library(ggplot2); library(caret);library(Hmisc);library(gridExtra);library(kernlab)
data(Wage)
data(spam)
inTrain <- createDataPartition(y=spam$type, p=0.75, list=F)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
inTrain <- createDataPartition(y=spam$type, p=0.75, list=F)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
M <- abs(cor(training[,-58]))
diag(M)<- 0
which(M>0.8, arr.ind = T)
names(spam)[c(34,32)]
plot(spam[,34], spam[,32])
smallSpam <- spam[,c(24,32)]
prComp <- prcomp(smallSpan)
pot(prComp$x[,1],prComp[,2])
names(spam)[c(34,32)]
plot(spam[,34], spam[,32])
smallSpam <- spam[,c(24,32)]
prComp <- prcomp(smallSpan)
plot(prComp$x[,1],prComp[,2])
smallSpam <- spam[,c(24,32)]
prComp <- prcomp(smallSpan)
plot(prComp$x[,1],prComp$x[,2])
smallSpam <- spam[,c(24,32)]
prComp <- prcomp(smallSpan)
smallSpam <- spam[,c(24,32)]
prComp <- prcomp(smallSpam)
plot(prComp$x[,1],prComp$x[,2])
prComp$rotation
?matlines
install.packages(c("pacman","AppliedPredictiveMeodeling"))
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
head(AlzheimerDisease)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
head(AlzheimerDisease)
head(AlzheimerDisease)
data(AlzheimerDisease)
names(AlzheimerDisease)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
head(diagnosis)
head(predictors)
source('~/.active-rstudio-document', echo=TRUE)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
pacman::p_load(AppliedPredictiveModeling,caret,data.table,ggplot2,spam,kernlab)
data(concrete)
str(concrete)
set.seed(1000)
pacman::p_load(AppliedPredictiveModeling,caret,data.table,ggplot2,spam,kernlab,Hmisc)
pacman::p_load(AppliedPredictiveModeling,caret,data.table,ggplot2,spam,kernlab,Hmisc, gridExtra)
age <- cut2(training$Age,g=10)
flyash <- cut2(training$FlyAsh,g=10)
byAge <- qplot(seq(1,nrow(training)),CompressiveStrength,data=training,col=age)
byFlyAsh <- qplot(seq(1,nrow(training)),CompressiveStrength,data=training,col=flyash)
grid.arrange(byAge,byFlyAsh)
names(concrete)
cutIndex <- cut2(training$index, g=10)
breaks <- 10
byCement <- qplot(index, CompressiveStrength, data=training, color=cut2(training$Cement, g=breaks))
byBlastFurnaceSlag <- qplot(index, CompressiveStrength, data=training, color=cut2(training$BlastFurnaceSlag, g=breaks))
byFlyAsh <- qplot(index, CompressiveStrength, data=training, color=cut2(training$FlyAsh, g=breaks))
byWater <- qplot(index, CompressiveStrength, data=training, color=cut2(training$Water, g=breaks))
bySuperplasticizer <- qplot(index, CompressiveStrength, data=training, color=cut2(training$Superplasticizer, g=breaks))
byCoarseAggregate <- qplot(index, CompressiveStrength, data=training, color=cut2(training$CoarseAggregate, g=breaks))
byFineAggregate <- qplot(index, CompressiveStrength, data=training, color=cut2(training$FineAggregate, g=breaks))
byAge <- qplot(index, CompressiveStrength, data=training, color=cut2(training$Age, g=breaks))
grid.arrange(byCement, byBlastFurnaceSlag, byFlyAsh, byWater, bySuperplasticizer, byCoarseAggregate, byFineAggregate, byAge)
data(concrete)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
cutIndex <- cut2(training$index, g=10)
breaks <- 10
byCement <- qplot(index, CompressiveStrength, data=training, color=cut2(training$Cement, g=breaks))
bycement
byCement
print(bycement)
print(byCement)
hist(training$Superplasticizer, breaks=20)
hist(log(training$Superplasticizer+1), breaks=20)
function (x, ...)
hist(training$Superplasticizer, breaks=20)
hist(training$Superplasticizer, breaks=20)
hist(log(training$Superplasticizer+1), breaks=20)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
names(training)
length(names(training))
IL_col_idx <- grep("^[Ii][Ll].*", names(training))
preObj <- preProcess(training[, IL_col_idx], method=c("center", "scale", "pca"), thresh=0.9)
preObj
names(preObj)
IL_col_idx <- grep("^[Ii][Ll].*", names(training))
suppressMessages(library(dplyr))
new_training <- training[, c(names(training)[IL_col_idx], "diagnosis")]
names(new_training)
IL_col_idx <- grep("^[Ii][Ll].*", names(testing))
suppressMessages(library(dplyr))
new_testing <- testing[, c(names(testing)[IL_col_idx], "diagnosis")]
names(new_testing)
# compute the model with non_pca predictors
non_pca_model <- train(diagnosis ~ ., data=new_training, method="glm")
# apply the non pca model on the testing set and check the accuracy
non_pca_result <- confusionMatrix(new_testing[, 13], predict(non_pca_model, new_testing[, -13]))
non_pca_result
install.packages("e1071")
pacman::p_load(AppliedPredictiveModeling,caret,data.table,ggplot2,spam,kernlab,Hmisc, gridExtra,e1071)
non_pca_model <- train(diagnosis ~ ., data=new_training, method="glm")
# apply the non pca model on the testing set and check the accuracy
non_pca_result <- confusionMatrix(new_testing[, 13], predict(non_pca_model, new_testing[, -13]))
non_pca_result
# perform PCA extraction on the new training and testing sets
pc_training_obj <- preProcess(new_training[, -13], method=c('center', 'scale', 'pca'), thresh=0.8)
pc_training_preds <- predict(pc_training_obj, new_training[, -13])
pc_testing_preds <- predict(pc_training_obj, new_testing[, -13])
# compute the model with pca predictors
pca_model <- train(new_training$diagnosis ~ ., data=pc_training_preds, method="glm")
# apply the PCA model on the testing set
pca_result <- confusionMatrix(new_testing[, 13], predict(pca_model, pc_testing_preds))
pca_result
data(concrete)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
names(training)
summary(training)
log(0)
shiny::runApp('covariates_development/disccovar')
library(shiny)
shinyUI(fluidPage(
titlePanel('DISCCOVAR'),
sidebarLayout(
sidebarPanel(
tags$head(
tags$style(type="text/css", "label.radio { display: inline-block; }", ".radio input[type=\"radio\"] { float: none; }"),
tags$style(type="text/css", "select { max-width: 200px; }"),
tags$style(type="text/css", "textarea { max-width: 185px; }"),
tags$style(type="text/css", ".jslider { max-width: 200px; }"),
tags$style(type='text/css', ".well { max-width: 310px; }"),
tags$style(type='text/css', ".span4 { max-width: 310px; }"),
tags$style(type="text/css", ".span12 .well { background-color: black; }")
),
conditionalPanel(
'input.dataset === "DisMod"',
checkboxGroupInput('show_vars', 'Columns in DisMOd to show:',
names(DisMod), selected = names(DisMod))
),
conditionalPanel(
'input.dataset === "CODEm"',
checkboxGroupInput('show_vars', 'Columns in CODEm to show:',
names(CODEm), selected = names(CODEm))
),
downloadButton('downloadData', 'Download')
),
mainPanel(
tabsetPanel(
id = 'dataset',
tabPanel('DisMod', DT::dataTableOutput('mytable1')),
tabPanel('CODEm', DT::dataTableOutput('mytable2'))
),
width = 8
)
)
))
# # Define the overall UI
# shinyUI(fluidPage(
#         title = 'Examples of DataTables',
#         sidebarLayout(
#                 sidebarPanel(
#                         conditionalPanel(
#                                 'input.dataset === "DisMod"',
#                                 helpText('Click the CODEm tab to see covariates used, timestamp and other info.')
#                         ),
#                         conditionalPanel(
#                                 'input.dataset === "CODEm"',
#                                  helpText('Click the DisMod tab to see covariates used, timestamp and other info..')
#                         )
#                 ),
#                 mainPanel(
#                         tabsetPanel(
#                                 id = 'dataset',
#                                 tabPanel('DisMod', dataTableOutput('table1')),
#                                 tabPanel('CODEm', dataTableOutput('table2'))
#                         )
#                 )
#         )
# ))
###WORKING
# shinyUI(fluidPage(
#         titlePanel('DISCCOVAR'),
#                 # Sidebar with controls to provide a caption, select a dataset,
#                 # and specify the number of observations to view. Note that
#                 # changes made to the caption in the textInput control are
#                 # updated in the output area immediately as you type
#                 sidebarLayout(
#                         sidebarPanel(
#                                 textInput("caption", "Caption:", "Data Summary"),
#
#                                 selectInput("dataset", "Choose a dataset:",
#                                             choices = c("DisMod", "CODEm")),
#
#                                 #numericInput("obs", "Number of observations to view:", 25),
#                                 downloadButton('downloadData', 'Download')
#
#                         ),
#
#
#                         # Show the caption, a summary of the dataset and an HTML
#                         # table with the requested number of observations
#                         mainPanel(
#                                 h3(textOutput("caption", container = span)),
#
#                                 verbatimTextOutput("summary"),
#
#                                 tableOutput("view")
#                         )
#                 )
#         )
# )
####ASIDE
#         navbarPage(
#                 title = h4("DISCCOVAR"),
#
#                 mainPanel(
#                         tabsetPanel(
#                                 id = 'dataset',
#                                 tabPanel('DisMod', dataTableOutput('table1')),
#                                 tabPanel('CODEm', dataTableOutput('table2'))
#                         )
#                 ),
#                 conditionalPanel(
#                         'input.dataset==="DisMod"'
#                 ),
#                 conditionalPanel(
#                         'input.dataset==="CODEm"'
#                 ),
#
#
#                 # Create a new Row in the UI for selectInputs for DisMod
#                 fluidRow(
#                         column(4,
#                                selectInput("modelable_entity_name",
#                                            "modelable_entity_name:",
#                                            c("All",
#                                              unique(as.character(dt$modelable_entity_name))))
#                         ),
#                         column(4,
#                                selectInput("covariate_name",
#                                            "covariate_name:",
#                                            c("All",
#                                              unique(as.character(dt$covariate_name))))
#                         ),
#                         column(4,
#                                selectInput("model_version_run_start",
#                                            "model_version_run_start:",
#                                            c("All",
#                                              unique(as.character(dt$model_version_run_start))))
#                         )
#                 ),
#
#
#                        # Create a new row for the table.
#                         fluidRow(
#                                 DT::dataTableOutput("table1")
#                         ),
#
#               fluidRow(
#                       column(4,
#                              selectInput("cause_name",
#                                          "cause_name:",
#                                          c("All",
#                                            unique(as.character(dt$cause_name))))
#                       ),
#                       column(4,
#                              selectInput("covariate_name",
#                                          "covariate_name:",
#                                          c("All",
#                                            unique(as.character(dt$covariate_name))))
#                       ),
#                       column(4,
#                              selectInput("model_version_run_start",
#                                          "model_version_run_start:",
#                                          c("All",
#                                            unique(as.character(dt$model_version_run_start))))
#                       )
#
#               ),
#
#                       # Create a new row for the table.
#                       fluidRow(
#                               DT::dataTableOutput("table2")
#                       ),
#
#    downloadLink('DisMod', 'Download')
#  )
#)
##WORKING
library(shiny)
library(ggplot2)
library(dplyr)
library(RMySQL)
library(data.table)
#set environment
if (.Platform$OS.type=="unix") {
prefix <- '/home/j'
} else {
prefix <- 'J:'
}
##pull covariates used in CODEm
conn <- dbConnect(RMySQL::MySQL(), host="modeling-cod-db.ihme.washington.edu", username="readonly", password="justlooking")
CODEm <-unique(dbGetQuery(conn, "select c.cause_id, c.cause_name, covariate_id,cov.covariate_name, mod_cov.model_version_id as CODEm_model_version_id,
mod_cov.covariate_model_version_id, covmv.description as covariate_model_version_description, mv.description as CODEm_model_version_description,
mv.date_inserted as model_version_run_start, cov.covariate_name_short
from
cod.model_covariate mod_cov
join
cod.model_version mv using (model_version_id)
join
covariate.model_version covmv on mod_cov.covariate_model_version_id = covmv.model_version_id
join
covariate.data_version covdv on covmv.data_version_id = covdv.data_version_id
join
shared.covariate cov using (covariate_id)
join
shared.cause c using (cause_id)
where
covmv.date_inserted > '2015-01-01 00:00:00'
order by mv.date_inserted desc"))
CODEm <- data.table(unique(select(CODEm, c(cause_id,cause_name,covariate_name_short,covariate_name_short,covariate_name,CODEm_model_version_id,model_version_run_start)))) #%>%
#setnames(c("cause_id","cause_name","CODEm_model_version_id"),c("entity_id","entity_name","sys_model_version_id"))
dbDisconnect(conn)
##Pull covariates used in DisMod
conn <- dbConnect(RMySQL::MySQL(), host="modeling-epi-db.ihme.washington.edu", username="readonly", password="justlooking")
DisMod <- dbGetQuery(conn, "SELECT
model_parameter.model_parameter_id,
model_parameter.model_version_id as dismod_model_version_id,
model_parameter.country_covariate_id,
model_version.model_version_run_start,
model_version.modelable_entity_id,
modelable_entity.modelable_entity_name,
parameter_type.parameter_type_id,
covariate.covariate_name_short,
covariate.covariate_name
FROM epi.model_parameter
JOIN
epi.parameter_type USING (parameter_type_id)
JOIN
epi.model_version USING (model_version_id)
JOIN
epi.modelable_entity USING (modelable_entity_id)
JOIN
shared.covariate ON model_parameter.country_covariate_id = covariate.covariate_id
WHERE parameter_type_id = 7
AND model_version_run_start > '2015-01-01 00:00:00'
ORDER BY model_version_run_start DESC")
DisMod <- data.table(unique(select(DisMod,c(modelable_entity_id,modelable_entity_name,covariate_name_short,covariate_name,dismod_model_version_id,model_version_run_start)))) #%>%
#setnames(c("modelable_entity_id","modelable_entity_name","dismod_model_version_id"),c("entity_id","entity_name","sys_model_version_id"))
dbDisconnect(conn)
#
# # write.csv(CODEm,paste0(prefix,"/temp/Edem/covariates/covariate_checks/results/CODEm_v8.csv"), row.names =F)
# # write.csv(DisMod,paste0(prefix,"/temp/Edem/covariates/covariate_checks/results/DisMod_v8.csv"), row.names =F)
shinyServer(function(input, output) {
# sorted columns are colored now because CSS are attached to them
datasetInput <- reactive({
switch(input$dataset,
"DisMod"=DisMod,
"CODEm"=CODEm)
})
output$mytable1 <- DT::renderDataTable({
DT::datatable(datasetInput(), options = list(lengthMenu = c(10, 30, 45), pageLength = 10))
})
# customize the length drop-down menu; display 5 rows per page by default
output$mytable2 <- DT::renderDataTable({
DT::datatable(datasetInput(), options = list(lengthMenu = c(10, 30, 45), pageLength = 10))
})
#create a doenloader
output$downloadData <- downloadHandler(
filename = function() {
paste0(input$dataset,'.csv')
},
content = function(file) {
write.table(datasetInput(),file,sep=",",row.names=FALSE)
}
)
})
shiny::runApp('covariates_development/disccovar')
data(mtcars)
head(mtcars)
library(moments)
install.packages("moments")
library(moments)
skewness(mtcars)
skewness
setwd("~/COURSERA/data_products")
library(shiny)
runApp()
